This task was to create a live chat function so that students could live chat with instructors.
It will take more work to make it usable in a truly useful way, but I did get a fucntional live chat
working between mulitple users using the SignalR libraries. I was also able to bring in the username
programmatically so that an additional pop-up asking for the name initially was not necessary.
Below are the three applicable files- the view, controller, and hub.


----View----

@using Microsoft.AspNet.Identity
@model LMS_MVC.Models.ApplicationUser

@{
    ViewBag.Title = "Chat";
}

<h2>Chat</h2>
<div id="dialog-message" title="Live Chat">
    <div class="container">
        <input type="text" id="message" />
        <input type="button" id="sendmessage" value="Send" />
        <input type="hidden" id="displayname" />
        <ul id="discussion"></ul>
    </div>
</div>

    @section scripts {

        <!--Reference the SignalR library. -->
        <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
        <!--Reference the autogenerated SignalR hub script. -->
        <script src="~/signalr/hubs"></script>
        <!--SignalR script to update the chat page and send messages.-->
        <script>
            $(function () {
                // Reference the auto-generated proxy for the hub..
                var chat = $.connection.chatHub;
                // Create a function that the hub can call back to display messages.
                chat.client.addNewMessageToPage = function (name, message) {
                    // Add the message to the page.
                    $('#discussion').append('<li><strong>' + htmlEncode(name)
                        + '</strong>: ' + htmlEncode(message) + '</li>');
                };
                // Get the user name and store it to prepend to messages.
                $('#displayname').val("@Model.FirstName @Model.LastName");  // gets UserName from login info ApplicationUser model
                // Set initial focus to message input box.
                $('#message').focus();
                // Start the connection.
                $.connection.hub.start().done(function () {
                    $('#sendmessage').click(function () {
                        // Call the Send method on the hub.
                        chat.server.send($('#displayname').val(), $('#message').val());
                        // Clear text box and reset focus for next comment.
                        $('#message').val('').focus();
                    });
                });
            });
            // optional function that html-encodes messages for display in the page.
            function htmlEncode(value) {
                var encodedValue = $('<div />').text(value).html();
                return encodedValue;
            }
        </script>
    } 
------------------------------------------------
----Controller----

using LMS_MVC.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Microsoft.AspNet.Identity;


namespace LMS_MVC.Controllers
{
    public class ChatController : Controller
    {
        ApplicationDbContext context = new ApplicationDbContext();

        // GET: Chat
        public ActionResult Chat()
        {
            ApplicationUser user = context.Users.Find(User.Identity.GetUserId());

            return View(user);
        }
    }
}
-------------------------------------------------
----Chat Hub----

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Microsoft.AspNet.SignalR;
using System.Threading.Tasks;
using Microsoft.AspNet.Identity;
using static LMS_MVC.Models.ApplicationUser;


namespace LMS_MVC.Hubs
{
    [Authorize]
    public class ChatHub : Hub
    {

         public void Send(string name, string message)  
        {
            // Call the addNewMessageToPage method to update clients.
            Clients.All.addNewMessageToPage(name, message); 
        }      
    }
}
